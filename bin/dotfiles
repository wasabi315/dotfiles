#!/bin/bash -eu

if [ -z "${DOTPATH:-}" ]; then
    DOTPATH="${HOME}/.dotfiles"; export DOTPATH
fi

if [ -z "${BACKUP_PATH:-}" ]; then
    BACKUP_PATH="${DOTPATH}/backup"; export BACKUP_PATH
fi


source "${DOTPATH}/lib/utils.sh"


help() {

    local name=`basename $0`
    local backups=(${BACKUP_PATH}/*)
    local backup_info=()

    if [ -z "${backups}" ]; then
        backup_info="Nothing backed up"
    else
        backup_info="${backups[@]}"
    fi

    cat <<EOF
Usage:
  $name <command>

This dotfiles is for wasabi315's personal Ubuntu 18.04 minimal environment.

Commands:
  ${BOLD}deploy${CLEAR}:  back up your configs and symlink dotfiles to your home directory.
           your configs backed up will locate in ${DOTPATH}/backup.

  ${BOLD}init${CLEAR}:    install software packages.
           information for the package list: ${BOLD} See https://github.com/wasabi315/dotfiles${CLEAR}

  ${BOLD}install${CLEAR}: symlink dotfiles to your home directory and install software packages.

  ${BOLD}update${CLEAR}:  update dotfiles.

  ${BOLD}clean${CLEAR}:   remove dotfiles and restore to your original settings.

  ${BOLD}help${CLEAR}:    print help (this message).

Backed up files(dirs):
  ${backup_info[@]}

For more information see: ${BOLD}https://github.com/wasabi315/dotfiles${CLEAR}
               Copyright: ${BOLD}(c) 2018 wasabi315${CLEAR}
                Lincence: ${BOLD}MIT${CLEAR}

EOF

}


deploy() {

    running "Deploying dotfiles"
    ${DOTPATH}/scripts/deploy.sh
    ok "Deploy"

}


init() {

    running "Install softwares..."
    ${DOTPATH}/scripts/init.sh
    ok "Initialize"

}


install() {

    deploy &&
    init

}


update() {

    running "Updating dotfiles..."
    git pull origin master
    ok

}


clean() {

    echo "todo: restore original config"

    warn "WARNING: This will remove current dotfiles!!"
    warn "Continue? (y/n)"
    read -r REPLY
    if [ "$REPLY" == Y ] || [ "$REPLY" = y ]; then
        running "Cleaning dotfiles..."
        bash ${DOTPATH}/scripts/clean.sh
    else
        echo "abort."
        exit 1
    fi


}


if [ $# -ne 1 ]; then
    help
    exit 1
fi

command=$1

case $command in
    deploy)
        deploy
        ;;
    init)
        init
        ;;
    install)
        install
        ;;
    update)
        update
        ;;
    clean)
        clean
        ;;
    *)
        help
        ;;
esac

exit 0

# vim : filetype=sh
